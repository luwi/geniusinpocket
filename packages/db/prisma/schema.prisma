generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(schema: "public")]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  customer      Customer?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  expires_at        Int?
  refresh_token     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id               String             @id @default(cuid())
  userId           String             @unique
  stripeCustomerId String             @unique
  plan             SubscriptionPlan   @default(BASIC)
  metadata         Json?
  aiEmbedding      Float[]?           @db.Vector(1536)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
}

model Subscription {
  id                 String   @id @default(cuid())
  customerId         String
  stripeSubId        String   @unique
  status             String
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  metadata           Json?

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}

model WaitlistEntry {
  id        String         @id @default(cuid())
  email     String         @unique
  userId    String?
  status    WaitlistStatus @default(PENDING)
  source    String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum WaitlistStatus {
  PENDING
  CONFIRMED
  UNSUBSCRIBED
}
